@using DAl.Models
@using Newtonsoft.Json
@using System.Security.Claims
@using System.Globalization
@inject AutoMapper.IMapper Mapper
@model ProductsViewModel


@section ProductsPageStyle {

<link href="~/css/Products.css" rel="stylesheet" />
}

<div class="container">
    <div class="product-header">
        <h1>@Context.Request.Query["CategoryName"]<span class="product-count">@(Model.TotalPages * Model.PageSize) Products found</span></h1>
        <div class="filters">
            <div class="sort-container">
                <label for="sort">Sort by:</label>
                <select id="sort">
                    <option>Default order</option>
                    <option>Price: Low to High</option>
                    <option>Price: High to Low</option>
                    <option>Best Sellers</option>
                </select>
            </div>
            <div class="pagination-info">
                <span>Shown: <strong>from @((Model.CurrentPage - 1) * Model.PageSize) to @(((Model.CurrentPage - 1) * Model.PageSize) + Model.PageSize)</strong> from 2000</span>
            </div>
            <div class="search-container-header">
                <form asp-action="ProductsToCategory"
                asp-controller="Product"
                method="get">
                    <input type="hidden" name="categoryName" value="@Context.Request.Query["categoryName"]">
                    <input type="hidden" name="categoryId" value="@Context.Request.Query["categoryId"]">
                    <input type="text" name="searchTerm" placeholder="Search in results">
                    <button type="submit"><i class="fas fa-search"></i></button>
                </form>

            </div>

        </div>
    </div>

    <div class="Parent_to_Main">

        <div class="filter-sidebar">
            <div class="filter-section">
                <div class="filter-header">
                    <span>SUBCATEGORIES</span>
                    <i class="arrow"></i>
                </div>
                <div class="filter-content">

                    @if (ViewBag.Categories != null)
                    {
                        var convertedCategories = ViewBag.Categories as List<CategoryDto>;
                        <ul>

                            @foreach (var category in convertedCategories.Select((value, index) => (value, index)))
                            {
                                var routeValues = new Dictionary<string, string>
                                    {

                                    {"categoryName",$"{Context.Request.Query["categoryName"]}"},
                                    { "categoryId",$"{category.value.ParentId}"},
                                    { "subcategoryId",$"{category.value.Id}"},
                                    {"subcategoryName",$"{category.value.Name}" }};


                                <a asp-action="ProductsToCategory" asp-controller="Product" asp-all-route-data="routeValues">
                                    @if (CultureInfo.CurrentCulture.Name == "ar")
                                    {
                                    <li class="@(category.index>=10?"hidden":"")">@category.value.NameAr</li>

                                    }
                                    else
                                    {
                                    <li class="@(category.index>=10?"hidden":"")">@category.value.Name</li>

                                    }
                                </a>


                            }
                            <li class="show-more-category">Show all @convertedCategories.Count </li>
                        </ul>

                    }


                </div>
            </div>

            <div class="filter-section active">
                <div class="filter-header">
                    <span>PRICE</span>
                    <i class="arrow"></i>
                </div>
                <div class="filter-content">
                    <form asp-controller="Product" asp-action="ProductsToCategory" method="get">
                        <input type="hidden" name="categoryName" value="@Context.Request.Query["categoryName"]" />
                        <input type="hidden" name="categoryId" value="@Context.Request.Query["categoryId"]" />
                        <input type="hidden" name="subcategoryId" value="@Context.Request.Query["subcategoryId"]" />
                        <input type="hidden" name="subcategoryName" value="@Context.Request.Query["subcategoryName"]" />

                        <div class="price-inputs">
                            <input type="number" name="minPrice" placeholder="From" value="@Context.Request.Query["minPrice"]" min="0" />
                            <span>-</span>
                            <input type="number" name="maxPrice" placeholder="To" value="@Context.Request.Query["maxPrice"]" min="0" />
                        </div>

                        <div class="filter-buttons">
                            <button type="submit">Apply</button>
                            <a href="@Url.Action("ProductsToCategory", "Product", new {
                                    categoryName = Context.Request.Query["categoryName"],
                                    categoryId = Context.Request.Query["categoryId"],
                                    subcategoryId = Context.Request.Query["subcategoryId"],
                                    subcategoryName = Context.Request.Query["subcategoryName"]
                                })" class="reset">Reset</a>
                        </div>
                    </form>
                </div>


            </div>

            <div class="filter-section active">
                <div class="filter-header">
                    <span>SELLER RATING</span>
                    <i class="arrow"></i>
                </div>
                <div class="filter-content">
                    <div class="price-inputs">
                        <input type="text" placeholder="From">
                        <span>-</span>
                        <input type="text" placeholder="To">
                    </div>
                    <div class="filter-buttons">
                        <button>Apply</button>
                        <button class="reset">Reset</button>
                    </div>
                </div>
            </div>

            <div class="filter-section active">
                <div class="filter-header">
                    <span>GOODS WITH DISCOUNT</span>
                    <i class="arrow"></i>
                </div>
                <div class="filter-content">
                    <label><input type="radio" name="discount" checked> All goods</label>
                    <label><input type="radio" name="discount"> Goods with discount</label>
                    <div class="filter-buttons">
                        <button>Apply</button>
                        <button class="reset">Reset</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="cards-container">
            @Html.AntiForgeryToken()
                @if(Model.Products!=null){
                @foreach (var product in Model.Products)
                {

                    var productvm = Mapper.Map<FavoriteItemDto>(product);
                    <div class="card">
                        <div class="image-container">
                            <img src="@product.MainPictureUrl" alt="Product Image">
                            <div class="overlay-buttons">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <button class="heart-button"
                                            data-userId="@(User.FindFirst(e => e.Type == ClaimTypes.NameIdentifier).Value.ToString() ?? "no id")"
                                            data-product="@Html.Raw(JsonConvert.SerializeObject(productvm).Replace("\"", "&quot;"))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-heart">
                                            <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
                                        </svg>
                                    </button>
                                }
                                <button class="cart-button" data-clicked="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                         stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shopping-cart">
                                        <circle cx="8" cy="21" r="1" />
                                        <circle cx="19" cy="21" r="1" />
                                        <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <h3>@product.Title</h3>
                        <p>@product.Price.ConvertedPriceList.Internal.Price  SAR</p>
                        <a asp-action="ProductDetails"
                           asp-controller="Product"
                           asp-route-categoryId="@Context.Request.Query["categoryId"]" asp-route-categoryName="@Context.Request.Query["categoryName"]"
                           asp-route-productId="@product.Id" asp-route-page="@(Context.Request.Query["page"].ToString() ?? "0")">all details</a>
                    </div>

                }

                }
        </div>


    </div>





    <div class="pagination-custom">
        <ul>
            @if (Model.CurrentPage > 1)
            {
                <li class="btn prev">
                    <a href="@Url.Action("ProductsToCategory", new { categoryName = Context.Request.Query["categoryName"], categoryId = Context.Request.Query["categoryId"], page = Model.CurrentPage - 1, pageSize = Model.PageSize })">
                        <i class="fas fa-angle-left"></i> Prev
                    </a>
                </li>
            }
            @if (Model.CurrentPage > 3)
            {
                <li><a href="@Url.Action("ProductsToCategory", new { categoryName = Context.Request.Query["categoryName"], categoryId = Context.Request.Query["categoryId"], page = 1, pageSize = Model.PageSize })">1</a></li>
                <li class="dots"><span>...</span></li>
            }

            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
            {
                <li class="@(i == Model.CurrentPage ? "active" : "")">
                    <a href="@Url.Action("ProductsToCategory", new { categoryName = Context.Request.Query["categoryName"], categoryId = Context.Request.Query["categoryId"], page = i, pageSize = Model.PageSize })">@i</a>
                </li>
            }

            @if (Model.CurrentPage < Model.TotalPages - 2)
            {
                <li class="dots"><span>...</span></li>
                <li><a href="@Url.Action("ProductsToCategory", new { categoryName = Context.Request.Query["categoryName"], categoryId = Context.Request.Query["categoryId"], page = Model.TotalPages, pageSize = Model.PageSize })">@Model.TotalPages</a></li>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="btn next">
                    <a href="@Url.Action("ProductsToCategory", new { categoryName = Context.Request.Query["categoryName"], categoryId = Context.Request.Query["categoryId"], page = Model.CurrentPage + 1, pageSize = Model.PageSize })">
                        Next <i class="fas fa-angle-right"></i>
                    </a>
                </li>
            }
        </ul>
    </div>


</div>


@section ProductScript {
    <script src="~/js/Product.js"></script>
}